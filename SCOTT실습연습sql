/* [count] */

SELECT * FROM tab;
SELECT * FROM emp;
select * from salgrade;

SELECT COUNT(empno) FROM emp;
SELECT MIN(MGR) FROM EMP;
SELECT AVG(MGR) FROM EMP;

SELECT JOB, COUNT(*) FROM emp GROUP BY JOB;

select deptno, trunc(avg(sal)) as avg_sal, max(sal) as max_sal, min(sal) as min_sal, count(empno) from emp group by deptno;

select to_char(hiredate, 'yyyy'), deptno, count(*) from emp group by to_char(hiredate, 'yyyy'),deptno;

/* [조인 실습연습] */

select E.empn, o, e.ename,e.job, e.sal, e.comm, e.deptno, s.grade
from emp E join salgrade s on e.sal between losal and hisal;

select E.empno, e.ename,e.job, e.sal, e.comm, e.deptno, s.grade
from emp E, salgrade S where e.sal between losal and hisal;

/* EMPNO, MGR을 셀프조인하여서 자신을 담당하고있는 매니저가 누구인지 출력하시오 */

SELECT E1.ENAME, E1.EMPNO, E1.MGR, E2.ENAME AS E2_ENAME
FROM EMP E1 FULL OUTER JOIN EMP E2 ON E1.MGR = E2.EMPNO;

/* [JOIN실습]
급여가 2000초과인 사원들의 부서 정보, 사원 정보를 출력하시오.
DEPTNO, DNAME, EMPNO, ENAME, SAL */

SELECT E.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.SAL FROM EMP E JOIN DEPT D ON E.DEPTNO = D. DEPTNO
WHERE E.SAL>2000;

SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.JOB, E.SAL FROM EMP E RIGHT OUTER JOIN DEPT D ON E.DEPTNO = D.DEPTNO;

SELECT D.DEPTNO, D.DNAME, E1.EMPNO, E1.ENAME, E1.MGR,E1.SAL, E2.DEPTNO AS DEPNO_1,S.LOSAL, S.HISAL,S.GRADE, E2.EMPNO AS MGR_EMPNO,E2.ENAME AS MGR_ENAME
FROM EMP E1, EMP E2, SALGRADE S, DEPT D WHERE E1.DEPTNO = D.DEPTNO AND E1.SAL BETWEEN S.LOSAL AND S.HISAL AND E1.MGR = E2.EMPNO ORDER BY D.DEPTNO, E1.EMPNO;

SELECT D.DEPTNO, D.DNAME, E1.EMPNO, E1.ENAME, E1.MGR,E1.SAL, E1.DEPTNO AS DEPTNO_1 ,S.LOSAL, S.HISAL,S.GRADE, E2.EMPNO AS MGR_EMPNO,E2.ENAME AS MGR_ENAME
FROM EMP E1 RIGHT OUTER JOIN DEPT D ON E1.DEPTNO = D.DEPTNO 
LEFT OUTER JOIN SALGRADE S ON E1.SAL BETWEEN S.LOSAL AND S.HISAL
LEFT OUTER JOIN EMP E2 ON E1.MGR = E2.EMPNO
ORDER BY D.DEPTNO, E1.EMPNO;
SELECT D.DEPTNO, D.DNAME, E1.EMPNO, E1.ENAME, E1.MGR,E1.SAL,E2.DEPNO_1,S.LOSAL, S.HISAL,S.GRADE, E2.MGR_EMPNO,E2.MGR_ENAME
FROM EMP E1 JOIN DEPT D ON E1.DEPTNO = D.DEPTNO ;

-- 서브 쿼리 연습 
select * from emp;
--전체 사원 중 allen과 같은 직책인 사원들의 사원정보 , 부서 정보를 다음과 같이 출력하는 SQL문을 작성하시오.
select e.job, e.empno, e.ename, e.sal, d.deptno, d.dname 
from emp e join dept d on e.deptno = d.deptno 
where e.job_id > (select job from emp where ename = 'ALLEN');
select e.job, e.empno, e.ename, e.sal, d.deptno, d.dname
from emp e , dept d
where e.deptno = d.deptno and e.job_id in (select job from emp where ename = 'ALLEN');

-- 전체 사원의 평균 급여보다 높은 급여를 받는 사원들의 사원정보, 부서정보 , 급여 등급 정보를 출력
--단, 출력할 때 급여가 많은 순으로 정렬하되 급여가 같은 경우에는  사원번호를 기준으로 으로 출력
select e.empno, e.ename, d.dname, e.hiredate, d.loc, e.sal, s.grade
from emp e, dept d, salgrade s
where e.deptno = d.deptno and e.sal between s.losal and s.hisal and e.sal > (select avg(sal) from emp)
order by e.sal desc, e.empno asc;

--10번 부서에 근무하는 사원 중 30번 부서에는 존재하지 않는 직책을 가진 사원들의 사원정보, 부서 정보를 다음과 같이 출력하는 SQL문을 작성하시오.
select e.empno, e.ename, e.job, d.deptno, d.dname, d.loc
from emp e, dept d
where e.deptno = d.deptno and e.job not in(select distinct job from emp where deptno =30) and e.deptno = 10;
--직책이 SALESMAN인 사람들의 최고 급여보다 높은 급여를 받는 사원들의 사원정보, 급여등급 정보를 출력하는 SQL문을 작성하시오
--(단, 서브쿼리를 활용할 때 다중행 함수를 사용하는 방법과 사용하지 않는 방법을 통해 사원번호를 기준으로 오름차순 정렬하여 출력하시오.)
select empno, ename, sal ,(select grade from salgrade where e.sal between losal and hisal) as grade
from emp 
where sal> (select max(sal) from emp where job ='SALESMAN');

select empno, ename, sal ,
from emp 
where sal > all (select sal from emp where job ='SALESMAN');
--1] 실습을 위하여 기존 테이블을 이용하여 테이블을 생성한다.
--① EMP 테이블의 내용을 이용하여 EXAM_EMP 생성
--② DEPT 테이블의 내용을 이용하여 EXAM_DEPT 생성
--③ SALGRADE 테이블의 내용을 이용하여 EXAM_SALGRADE 생성
CREATE TABLE EXAM_EMP AS SELECT * FROM EMP;
CREATE TABLE EXAM_DEPT AS SELECT * FROM DEPT;
CREATE TABLE EXAM_SALGRADE AS SELECT * FROM SALGRADE;
--[실습2] 다음의 정보를 EXAM_EMP 테이블에 입력하시오.
SELECT * FROM EXAM_EMP;
INSERT INTO EXAM_EMP(EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO)
VALUES(7201,'TEST_USER1','MANAGER',7788,'2016-01-02',4500,NULL,50);

INSERT INTO EXAM_EMP(EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO)
VALUES(7202,'TEST_USER2','CLERK',7201,'2016-02-21',1800,NULL,50);

INSERT INTO EXAM_EMP(EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO)
VALUES(7203,'TEST_USER3','ANALYST',7201,'2016-04-11',3400,NULL,60);

INSERT INTO EXAM_EMP(EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO)
VALUES(7204,'TEST_USER4','SALESMAN',7201,'2016-05-31',2700,300,60);

INSERT INTO EXAM_EMP(EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO)
VALUES(7205,'TEST_USER5','CLERK',7201,'2016-07-20',2600,NULL,70);

INSERT INTO EXAM_EMP(EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO)
VALUES(7206,'TEST_USER6','CLERK',7201,'2016-09-08',2600,NULL,70);

INSERT INTO EXAM_EMP(EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO)
VALUES(7207,'TEST_USER7','LECTURER',7201,'2016-10-28',2300,NULL,80);

INSERT INTO EXAM_EMP(EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO)
VALUES(7208,'TEST_USER8','STUDENT',7201,'2018-03-09',1200,NULL,80);

--[실습3] EXAM_EMP에 속한 사원 중 50번 부서에서 근무하는 사원들의 평균 급여보다 많은 급여를 받고 있는 사원들을 70번 부서로 옮기는 SQL 문 작성하기
UPDATE EXAM_EMP
SET DEPTNO = 70
WHERE SAL>(SELECT AVG(SAL) FROM EMPLOYEE WHERE DEPTNO =50);
--[실습4] EXAM_EMP에 속한 사원 중 60번 부서의 사원 중에서 입사일이 가장 빠른 사원보다 늦게 입사한 사원의 급여를 10% 인상하고 80번 부서로 옮기는 SQL 문 작성하기
UPDATE EXAM_EMP
SET SAL = SAL*1.1 , DEPTNO  =80
WHERE HIREDATE >  (SELECT MIN(HIREDATE) FROM EXAM_EMP WHERE DEPTNO=60);
--[실습5] EXAM_EMP에 속한 사원 중, 급여 등급이 5인 사원을 삭제하는 SQL문을 작성하기
DELETE FROM EXAM_EMP WHERE EMPNO IN
                                   (SELECT EMPNO
                                   FROM EXAM_EMP, SALGRADE
                                   WHERE SAL BETWEEN LOSAL AND HISAL AND GRADE =5);
                                   
commit;